from __future__ import annotations

import os
from collections import namedtuple
from enum import Enum
from time import time

from config import *
from common import *
from HeaderParser import *
import AST
from parse.GherkinParser import GherkinParser


class CodeGen:
    features: list[AST.Feature]
    filepath: str
    code: str
    output_line_count: int
    indentation_level: int
    total_scenario_count: int
    error_scenario_count: int

    def __init__(self, features: list[AST.Feature], out_filepath: str):
        self.features = features
        self.filepath = out_filepath
        self.code = ""
        self.output_line_count = 0
        self.indentation_level = 0
        self.total_scenario_count = 0
        self.error_scenario_count = 0

    def build(self):
        self.emit_header_boilerplate()
        for feature in self.features:
            self.emit_feature(feature)
        self.emit_footer_boilerplate()
        self.write()

    def emit_feature(self, feature: AST.Feature):
        self.push_scope()
        self.line("int _passedScenarioCount = 0;")
        self.line('cout << "FEATURE: {}" << endl;'.format(feature.name))
        for scenario in feature.scenarios:
            self.total_scenario_count += 1
            if isinstance(scenario, AST.ReportErr):
                self.error_scenario_count += 1
                self.line('cout << " - ERROR: {}" << endl;'.format(scenario.msg))
            else:
                self.emit_scenario(scenario)
        self.line('cout << "{} passed " << _passedScenarioCount << " of {} tests." << endl;'.format(feature.name, len(feature.scenarios)))

    def emit_scenario(self, scenario: AST.Scenario):
        starting_line_count = self.output_line_count
        self.push_scope()
        self.line("bool _scenarioPassed = true;")

        for stmt in scenario.statements:
            pass

        self.line("if (_scenarioPassed){")
        self.line('    cout << " - PASS: {}" << endl;'.format(scenario.name))
        self.line("    _passedScenarioCount++;")
        self.line("} else {")
        self.line('    cout << " - FAIL: {}" << endl;'.format(scenario.name))
        self.line('    cout << "         at src/tests.cc:{}" << endl;'.format(starting_line_count))
        self.line("}")

    def emit_header_boilerplate(self):
        self.line("#include <chrono>")
        for file in includes:
            self.line('#include "' + file + '"')

        self.line("// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.")
        self.line("int main()")
        self.push_scope()
        self.line("long _start_time = chrono::duration_cast< chrono::milliseconds >( chrono::system_clock::now().time_since_epoch()).count();")

    def emit_footer_boilerplate(self):
        self.line("long _end_time = chrono::duration_cast< chrono::milliseconds >( chrono::system_clock::now().time_since_epoch()).count();")
        self.line('cout << "' + ("=" * 30) + '" << endl;')
        self.line('cout << "- Execute: " << (_end_time - _start_time) << " ms." << endl;')
        self.line("return 0;")
        self.pop_scope()

    def push_scope(self):
        self.line("{")
        self.indentation_level += 1

    def pop_scope(self):
        self.line("}")
        self.indentation_level -= 1

    def line(self, c: str):
        self.code += ("    " * (self.indentation_level)) + c + "\n"
        self.output_line_count += 1

    def write(self):
        with open(self.filepath, "w") as f:
            f.write(self.code)


def run_the_tests():
    parse_start_time = time()

    features = []
    for root, dirs, files in os.walk("../tests"):
        for name in files:
            path = os.path.join(root, name)

            c = GherkinParser(path)
            features.append(c.build())

    CodeGen(features, out_filepath="../src/tests.cc").build()

    build_start_time = time()
    print("=" * 30)
    os.system("/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MAKE_PROGRAM=/Applications/CLion.app/Contents/bin/ninja/mac/ninja -G Ninja -S /Users/luke/Documents/mods/raytracer -B /Users/luke/Documents/mods/raytracer/cmake-build-debug")
    os.system("/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake --build /Users/luke/Documents/mods/raytracer/cmake-build-debug --target raytracer_tests -j 6")
    print("=" * 30)
    run_start_time = time()
    os.system("/Users/luke/Documents/mods/raytracer/cmake-build-debug/raytracer_tests")
    run_end_time = time()
    print("- Build: " + str(int(round(run_start_time - build_start_time, 3) * 1000)) + " ms.")
    print("- Parse: " + str(int(round(build_start_time - parse_start_time, 3) * 1000)) + " ms.")